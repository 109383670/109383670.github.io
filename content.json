[{"title":"ios游戏分辨率问题","date":"2017-03-06T04:48:56.000Z","path":"2017/03/06/2017-03-06/","text":"屏幕分辨率一般指的是屏幕上像素的多少。所谓像素就是屏幕上的最小发光点，Led灯屏幕的一个像素就是一个Led灯。例如：640*960指的就是屏幕的宽和高上分别有640和960个像素。分辨率越高，图像越精细，也就是常说的高清。 iPhones设备分辨率英寸 像素尺寸 尺寸表 游戏开发中用到的分辨率 iPhone 4s : 640x960 、宽高比：0.667 iPhone 5s : 640x1136、宽高比：0.563 iPhone 6 : 750x1134、宽高比：0.562 iPhone 6 plus : 1242x2208、宽高比：0.562 iPad : 1536x2048、宽高比：0.75 为什么适配不同分辨率不同的设备有不同的分辨率，为了减少美术设计人员的工作量，统一化产品设计就必须适配各种分辨率。尽量做到一套设计，不同分辨率的设备都可以通用，不需要美术设计人员针对每一个分辨率版本都给出不同的设计方案，也便于维护升级。一套设计也便于减少游戏安装包大小，优化资源，提高游戏运行速度。 适配分辨率方案1、针对不同的分辨率，给出不同的设计。 优点：效果最好，因为针对每一个分辨率都做了专门的适配，不同的分辨率都能体现最好的设计效果。 缺点：工作量大，维护困难，每一次升级修改都需要针对每一个分辨率的版本进行更新，大大增加了工作时间和出错的可能性。不利于扩展，如果市场上出现了新的设备，不同的分辨率，又得更新版本升级。 2、 按实际屏幕大小进行缩放针对不同的分辨率，将游戏画面整个进行缩放，填充满整个屏幕。 优点：通用性高，工作量低。不管什么屏幕都是一套素材，一套代码，不需要额外的工作。 缺点：画面严重失真，因为是按照实际屏幕进行缩放，所以如果实际屏幕的宽高比与设计的宽高比不同的话，画面就会出现变形。整个画面看起来像是被压扁或是拉长。 如下图，变形了： 3、 按设计比例进行缩放针对不同的分辨率，按固定的宽高比进行缩放。 优点：最大程度的还原设计师的设计，可以做到一套设计通用，不会出现失真。 缺点：会在屏幕上下或者左右留下黑边，影响游戏体验。 如下图，有黑边，UI位置暴露了： 4、固定高度适配 在3号方案的基础上，对按钮等UI元素根据分辨率进行动态计算调整。 优点一套设计通用，不会出现2、3中的问题。 缺点：不能完全的还原设计师设计，要做出妥协。 实际开发中采用的方案实际开发中采用的方案是4号方案。4号方案能在保证画面不变形和出现黑边的情况下，最大程度的减少工作量。但是需要设计师巧妙的设计游戏背景图画。 ###以下图为例：正常的设计分辨率： ipad适配后的分辨率： 设计师设计比例根据游戏的主要用户和市场上手机的主要分辨率，决定设计师设计游戏UI时使用的分辨率。设计师只需要注意分辨率的宽高比，宽高比决定了屏幕上的布局。设计师作图时，应该根据宽高比，最大化画布的大小。比如：如果设计师的画布大小只有640x1136大小，当一旦需要1242x2208大小的图片时，设计师只能放大图片，这样就会导致图片质量下降。而如果设计师一开始的画布大小是2484x4416时，只需要将导出的图片缩小就可以了，不会过多的影响图片质量。 实际使用比例游戏的主要人群是iPhone用户，而市场上的主流设备是iphone5以上，所以采用的设备宽高比是0.562，也就是iphone6的宽高比。 计算背景图片需要大小：根据要适配的屏幕宽高比，主要有3种： iphone 6 : 0.562 iphone 4s : 0.667 ipad：0.75 假设高度为1，那么这3种分辨率中，宽度最大的是ipad的宽度，为0.75。那么设计师要设计的背景图片的宽高比根据最大宽度原则，采用0.75。 设计师如何工作真实的分辨率：750x1334 背景图片大小：高度 = 1334宽度 = 1002。计算过程：1334x0.75 = 1000.5 。近似取偶数 = 1002最终大小：1002x1334设计师做图时，可以选择做一个2倍大的背景图。1002x2 = 2004、 1334x2 = 2668。 设计师设计步骤： 新建大小为 1500x2668的画布 安排按钮等UI布局 设计游戏背景图 将背景图单独拿出来，扩充为2004x2668大小的画布，将多出来的部分过渡好。 注意：设计师主要精力放在1500x2668这个画布上，主要的元素都要在这个画布上呈现。背景宽度扩充的部分只需要过渡好，让玩家看起来不突兀，自然就好。 作品：设计师需要提交1002x1334的背景图，其他的ui元素正常提交，没有变动。","tags":[{"name":"ios","slug":"ios","permalink":"http://codeshuai.com/tags/ios/"},{"name":"游戏开发","slug":"游戏开发","permalink":"http://codeshuai.com/tags/游戏开发/"}]},{"title":"Scrapy学习记录","date":"2017-02-27T05:19:50.000Z","path":"2017/02/27/2017-02-27-1/","text":"Scrapy Shell 命令: 开始抓取网页: 1scrapy shell 'http://www.dytt8.net/index.htm' selector内容: 1response.xpath(\"//a/@href\").extract()[0] 输出jsonItem： 1scrapy crawl dmoz -o items.json xpath: following-sibling:除自身外后面的同辈兄弟。如：td/following-sibling::td 同级td兄弟。 xpath中的序列从1开始：/a[1],代表a的第一个元素。没有[0]。 遍历多个变量： 1for t , l in izip(response.xpath(strname), response.xpath(strurl)): r在Python的string前面加上‘r’， 是为了告诉编译器这个string是个raw string，不要转意backslash ‘\\’ 。 例如，\\n 在raw string中，是两个字符，\\和n， 而不会转意为换行符。由于正则表达式和 \\ 会有冲突，因此，当一个字符串使用了正则表达式后，最好在前面加上’r’。 激活pipeline:在setting.py里，为了启用一个Item Pipeline组件，你必须将它的类添加到 ITEM_PIPELINES 配置，就像下面这个例子: 123ITEM_PIPELINES = &#123; &apos;myproject.pipelines.PricePipeline&apos;: 300,&#125; 分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。如： 1ITEM_PIPELINES = &#123;&apos;工程名.pipelines.自定义处理pipe类名&apos;: 1&#125; 使用相对XPaths:/或者//永远表示的是绝对路径，在嵌套xpath里，用’a/text()’这样的相对路径。 response.urljoin:方法建立绝对路径并且产生新的请求，并注册回调函数parse_dir_contents()来爬取需要的数据。 123456789101112def parse(self, response): for href in response.css(\"ul.directory.dir-col &gt; li &gt; a::attr('href')\"): url = response.urljoin(href.extract()) yield scrapy.Request(url, callback=self.parse_dir_contents) def parse_dir_contents(self, response): for sel in response.xpath('//ul/li'): item = DmozItem() item['title'] = sel.xpath('a/text()').extract() item['link'] = sel.xpath('a/@href').extract() item['desc'] = sel.xpath('text()').extract() yield item 递归抓取:123456789101112131415161718class Blurb2Spider(BaseSpider): name = \"blurb2\" allowed_domains = [\"www.domain.com\"] def start_requests(self): yield self.make_requests_from_url(\"http://www.domain.com/bookstore/new\") def parse(self, response): hxs = HtmlXPathSelector(response) urls = hxs.select('//div[@class=\"bookListingBookTitle\"]/a/@href').extract() for i in urls: yield Request(urlparse.urljoin('https://www.domain.com/', i[1:]),callback=self.parse_url) def parse_url(self, response): hxs = HtmlXPathSelector(response) print response,'-------&gt;' 相对地址:12import urljoinurlparse.urljoin(response.url, myurl) 定制图片管道的例子:下面是一个图片管道的完整例子，其方法如上所示: 12345678910111213141516import scrapyfrom scrapy.pipeline.images import ImagesPipelinefrom scrapy.exceptions import DropItemclass MyImagesPipeline(ImagesPipeline): def get_media_requests(self, item, info): for image_url in item['image_urls']: yield scrapy.Request(image_url) def item_completed(self, results, item, info): image_paths = [x['path'] for ok, x in results if ok] if not image_paths: raise DropItem(\"Item contains no images\") item['image_paths'] = image_paths return item 定位要详细://div[@id = “Zoom”]//img[1]/@srcdiv的定位要详细，如果是//div/span/img[1]/@src就返回为null,虽然firebug里面也没有问题。 Strip():Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。MapCompose(unicode.strip, unicode.title)) ，移除空格与换行例如: 1l.add_xpath('image_time', '//div[@class = \"co_content8\"]/ul/text()[1]', MapCompose(unicode.strip, unicode.title)) 下载图片:settings.py中有一行ROBOTSTXT_OBEY = True，需要改成False，否则可能下载不了图片。ROBOTSTXT_OBEY是否遵守robot协议，有些网站的robot.txt中表明，不允许爬去，这时候，如果要爬去的话，就要设置为false，不遵守。 No Moulde PIL Find:直接用pycharm自带的interpreter安装pillow mac下要注意python的安装路径参考： http://www.jianshu.com/p/078ad2067419http://www.cnblogs.com/kylinlin/p/5405246.htmlhttp://wiki.jikexueyuan.com/project/scrapy/item-pipeline.htmlhttp://www.open-open.com/lib/view/open1432868637316.html","tags":[{"name":"Scrapy","slug":"Scrapy","permalink":"http://codeshuai.com/tags/Scrapy/"},{"name":"Learning","slug":"Learning","permalink":"http://codeshuai.com/tags/Learning/"}]},{"title":"Scrapy安装与运行记录","date":"2017-02-27T04:02:44.000Z","path":"2017/02/27/2017-02-27/","text":"安装Homebrewruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装pythonbrew install python Homebrew会自动安装好Setuptools和 pip 。Setuptools提供 easy_install 命令，实现通过网络（通常Internet）下载和安装第三方Python包。 还可以轻松地将这种网络安装的方式加入到自己开发的Python应用中。pip 是一款方便安装和管理Python 包的工具。 安装Scrapypip install scrapy Scrapy 使用: IDE工具：pycharm社区免费版本 教程参考: http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html#intro-tutorial 命令: 生成HelloWorld的Scrapy工程 scrapy startproject HelloWorld 在pycharm IDE中配置命令 原理： 执行: scrapy crawl MyPa (MyPa是自己在类中定义的爬虫名字)， 相当于在终端执行： /usr/local/bin/python /usr/local/lib/python2.7/site-packages/scrapy/cmdline.py crawl MyPa 注意：要小心python的路径，如果python的路径不对，还是会报错。这里指的路径是系统路径与pycharm里设置的python路径。 在终端里用which python查看一下路径,如果与pycharm设置里的不同，将修改成更系统路径一样的。 中文问题: shell里输出的是utf-8编码,用print可打印出中文。 用变量格式化的方式，不直接在xpath中用中文字符，而是用一个变量代替。如’中文’,用u’中文’。或者在字符串前加u。如u”//a/text()” 打印的时候可以参考： 1234for sel in response.xpath(\"//div[@id='mcontent']/div/p\"): conect = sel.xpath(\"text()\").extract() for t in conect: print(t.encode(\"utf-8\")) pycharm中支持中文 代码页加入: # -*-coding:utf-8-*- 代码: 1234strpath = u\"//td[descendant::a[contains(text(),'中文字符')]]\"。或者strz = '中文字符'strpath = u\"//td[descendant::a[contains(text(),%s)]]%strz\" json输出中文： 12345678910def __init__(self): self.file = codecs.open(\"items.json\", \"wb\", encoding=\"utf-8\") def process_item(self, item, spider): line = json.dumps(dict(item), ensure_ascii=False) + \"\\n\" self.file.write(line) return item def spider_closed(self, spider): self.file.close() ##读取文件with codecs.open(file_name, “r”,encoding=’utf-8’, errors=’ignore’) as fdata: ##decode encodedecode 总是返回unicode字符encode 总是接受一个unicode字符进行转换","tags":[{"name":"Scrapy","slug":"Scrapy","permalink":"http://codeshuai.com/tags/Scrapy/"},{"name":"Setup","slug":"Setup","permalink":"http://codeshuai.com/tags/Setup/"}]},{"title":"hex+mac安装记录","date":"2017-02-22T12:06:47.000Z","path":"2017/02/22/2017-02-22/","text":"有用的命令： hexo g -d 直接发布部署 hexo g 生成 hexo s 打开本地服务器 http://localhost:4000/ 浏览 本地预览步骤： hexo g hexo s http://localhost:4000/ 安装参考：参考域名绑定部分、修改主题各种出现的问题总结 具体安装时出现的问题： 不能执行hexo命令，只有init,help,version三个命令。解决方案：要在hexo目录下执行。 注意坑：执行hexo server时出错，_config.xml里，type: repo: branch:后面，要有一个空格。 在DNS的配置里，加入固定的两个IP @ A 192.30.252.153@ A 192.30.252.154 hexo主题：Next风格不错Next的设置GitWiki里很详细","tags":[{"name":"hexo","slug":"hexo","permalink":"http://codeshuai.com/tags/hexo/"}]},{"title":"Hello World","date":"2017-02-22T04:41:28.000Z","path":"2017/02/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]