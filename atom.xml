<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeForFun</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codeshuai.com/"/>
  <updated>2017-03-06T08:20:18.000Z</updated>
  <id>http://codeshuai.com/</id>
  
  <author>
    <name>BoomCode</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ios游戏分辨率问题</title>
    <link href="http://codeshuai.com/2017/03/06/2017-03-06/"/>
    <id>http://codeshuai.com/2017/03/06/2017-03-06/</id>
    <published>2017-03-06T04:48:56.000Z</published>
    <updated>2017-03-06T08:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>屏幕分辨率一般指的是屏幕上像素的多少。所谓像素就是屏幕上的最小发光点，Led灯屏幕的一个像素就是一个Led灯。例如：640*960指的就是屏幕的宽和高上分别有640和960个像素。分辨率越高，图像越精细，也就是常说的高清。</p>
<h2 id="iPhones设备分辨率"><a href="#iPhones设备分辨率" class="headerlink" title="iPhones设备分辨率"></a>iPhones设备分辨率</h2><h3 id="英寸"><a href="#英寸" class="headerlink" title="英寸"></a>英寸</h3><p><img src="/images/1708203-1768998327604e30.png" alt="1708203-1768998327604e30"></p>
<h3 id="像素尺寸"><a href="#像素尺寸" class="headerlink" title="像素尺寸"></a>像素尺寸</h3><p><img src="/images/1708203-75913098015ba4c2.png" alt="1708203-75913098015ba4"></p>
<h3 id="尺寸表"><a href="#尺寸表" class="headerlink" title="尺寸表"></a>尺寸表</h3><p><img src="/images/1708203-9184bee9ba12d3b5.png" alt="1708203-9184bee9ba12d3b5"></p>
<h2 id="游戏开发中用到的分辨率"><a href="#游戏开发中用到的分辨率" class="headerlink" title="游戏开发中用到的分辨率"></a>游戏开发中用到的分辨率</h2><ul>
<li>iPhone 4s : 640x960  、<strong>宽高比：0.667</strong></li>
<li>iPhone 5s : 640x1136、<strong>宽高比：0.563</strong></li>
<li>iPhone 6 : 750x1134、<strong>宽高比：0.562</strong></li>
<li>iPhone 6 plus : 1242x2208、<strong>宽高比：0.562</strong></li>
<li>iPad : 1536x2048、<strong>宽高比：0.75</strong></li>
</ul>
<h2 id="为什么适配不同分辨率"><a href="#为什么适配不同分辨率" class="headerlink" title="为什么适配不同分辨率"></a>为什么适配不同分辨率</h2><p>不同的设备有不同的分辨率，为了减少美术设计人员的工作量，统一化产品设计就必须适配各种分辨率。尽量做到一套设计，不同分辨率的设备都可以通用，不需要美术设计人员针对每一个分辨率版本都给出不同的设计方案，也便于维护升级。<br>一套设计也便于减少游戏安装包大小，优化资源，提高游戏运行速度。</p>
<h2 id="适配分辨率方案"><a href="#适配分辨率方案" class="headerlink" title="适配分辨率方案"></a>适配分辨率方案</h2><h3 id="1、针对不同的分辨率，给出不同的设计。"><a href="#1、针对不同的分辨率，给出不同的设计。" class="headerlink" title="1、针对不同的分辨率，给出不同的设计。"></a>1、针对不同的分辨率，给出不同的设计。</h3><ul>
<li>优点：<br>效果最好，因为针对每一个分辨率都做了专门的适配，不同的分辨率都能体现最好的设计效果。</li>
</ul>
<ul>
<li>缺点：<br>工作量大，维护困难，每一次升级修改都需要针对每一个分辨率的版本进行更新，大大增加了工作时间和出错的可能性。不利于扩展，如果市场上出现了新的设备，不同的分辨率，又得更新版本升级。</li>
</ul>
<h3 id="2、-按实际屏幕大小进行缩放"><a href="#2、-按实际屏幕大小进行缩放" class="headerlink" title="2、 按实际屏幕大小进行缩放"></a>2、 按实际屏幕大小进行缩放</h3><p>针对不同的分辨率，将游戏画面整个进行缩放，填充满整个屏幕。</p>
<ul>
<li><p>优点：<br>通用性高，工作量低。不管什么屏幕都是一套素材，一套代码，不需要额外的工作。</p>
</li>
<li><p>缺点：<br>画面严重失真，因为是按照实际屏幕进行缩放，所以如果实际屏幕的宽高比与设计的宽高比不同的话，画面就会出现变形。整个画面看起来像是被压扁或是拉长。</p>
<p>如下图，变形了：<br><img src="/images/123.jpg" alt="123"></p>
</li>
</ul>
<h3 id="3、-按设计比例进行缩放"><a href="#3、-按设计比例进行缩放" class="headerlink" title="3、 按设计比例进行缩放"></a>3、 按设计比例进行缩放</h3><p>针对不同的分辨率，按固定的宽高比进行缩放。</p>
<ul>
<li><p>优点：<br>最大程度的还原设计师的设计，可以做到一套设计通用，不会出现失真。</p>
</li>
<li><p>缺点：<br>会在屏幕上下或者左右留下黑边，影响游戏体验。</p>
</li>
</ul>
<p>如下图，有黑边，UI位置暴露了：<br><img src="/images/222.jpg" alt="222"></p>
<h3 id="4、固定高度适配"><a href="#4、固定高度适配" class="headerlink" title="4、固定高度适配"></a>4、固定高度适配</h3><p>  在3号方案的基础上，对按钮等UI元素根据分辨率进行动态计算调整。</p>
<ul>
<li><p>优点<br>一套设计通用，不会出现2、3中的问题。</p>
</li>
<li><p>缺点：<br>不能完全的还原设计师设计，要做出妥协。</p>
</li>
</ul>
<h2 id="实际开发中采用的方案"><a href="#实际开发中采用的方案" class="headerlink" title="实际开发中采用的方案"></a>实际开发中采用的方案</h2><p>实际开发中采用的方案是4号方案。4号方案能在保证画面不变形和出现黑边的情况下，最大程度的减少工作量。但是需要设计师巧妙的设计游戏背景图画。</p>
<p>###以下图为例：<br>正常的设计分辨率：<br><img src="/images/0x0ss.jpg" alt="0x0ss"></p>
<p>ipad适配后的分辨率：</p>
<p><img src="/images/0x0ss-2.jpg" alt="0x0ss-2"></p>
<h3 id="设计师设计比例"><a href="#设计师设计比例" class="headerlink" title="设计师设计比例"></a>设计师设计比例</h3><p>根据游戏的主要用户和市场上手机的主要分辨率，决定设计师设计游戏UI时使用的分辨率。设计师只需要注意分辨率的宽高比，宽高比决定了屏幕上的布局。设计师作图时，应该根据宽高比，最大化画布的大小。<br>比如：如果设计师的画布大小只有640x1136大小，当一旦需要1242x2208大小的图片时，设计师只能放大图片，这样就会导致图片质量下降。而如果设计师一开始的画布大小是2484x4416时，只需要将导出的图片缩小就可以了，不会过多的影响图片质量。</p>
<h3 id="实际使用比例"><a href="#实际使用比例" class="headerlink" title="实际使用比例"></a>实际使用比例</h3><p>游戏的主要人群是iPhone用户，而市场上的主流设备是iphone5以上，所以采用的设备宽高比是<strong>0.562</strong>，也就是iphone6的宽高比。</p>
<h3 id="计算背景图片需要大小："><a href="#计算背景图片需要大小：" class="headerlink" title="计算背景图片需要大小："></a>计算背景图片需要大小：</h3><p>根据要适配的屏幕宽高比，主要有3种：</p>
<ul>
<li>iphone 6 : 0.562 </li>
<li>iphone 4s : 0.667</li>
<li>ipad：0.75</li>
</ul>
<p>假设高度为1，那么这3种分辨率中，宽度最大的是ipad的宽度，为0.75。那么设计师要设计的背景图片的宽高比根据最大宽度原则，采用0.75。</p>
<h3 id="设计师如何工作"><a href="#设计师如何工作" class="headerlink" title="设计师如何工作"></a>设计师如何工作</h3><h4 id="真实的分辨率："><a href="#真实的分辨率：" class="headerlink" title="真实的分辨率："></a>真实的分辨率：</h4><p>750x1334</p>
<h4 id="背景图片大小："><a href="#背景图片大小：" class="headerlink" title="背景图片大小："></a>背景图片大小：</h4><p>高度 = 1334<br>宽度 = 1002。计算过程：1334x0.75 = 1000.5 。近似取偶数 = <strong>1002</strong><br>最终大小：<strong>1002x1334</strong><br>设计师做图时，可以选择做一个2倍大的背景图。1002x2 = 2004、 1334x2 = 2668。</p>
<h4 id="设计师设计步骤："><a href="#设计师设计步骤：" class="headerlink" title="设计师设计步骤："></a>设计师设计步骤：</h4><ol>
<li>新建大小为 <strong>1500x2668</strong>的画布</li>
<li>安排按钮等UI布局</li>
<li>设计游戏背景图</li>
<li>将背景图单独拿出来，扩充为2004x2668大小的画布，将多出来的部分过渡好。</li>
</ol>
<p>注意：<br>设计师主要精力放在1500x2668这个画布上，主要的元素都要在这个画布上呈现。背景宽度扩充的部分只需要过渡好，让玩家看起来不突兀，自然就好。</p>
<p>作品：<br>设计师需要提交1002x1334的背景图，其他的ui元素正常提交，没有变动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;屏幕分辨率一般指的是屏幕上像素的多少。所谓像素就是屏幕上的最小发光点，Led灯屏幕的一个像素就是一个Led灯。例如：640*960指的就是屏幕的宽和高上分别有640和960个像素。分辨率越高，图像越精细，也就是常说的高清。&lt;/p&gt;
&lt;h2 id=&quot;iPhones设备分辨率&quot;
    
    </summary>
    
    
      <category term="ios" scheme="http://codeshuai.com/tags/ios/"/>
    
      <category term="游戏开发" scheme="http://codeshuai.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy学习记录</title>
    <link href="http://codeshuai.com/2017/02/27/2017-02-27-1/"/>
    <id>http://codeshuai.com/2017/02/27/2017-02-27-1/</id>
    <published>2017-02-27T05:19:50.000Z</published>
    <updated>2017-02-27T05:52:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scrapy-Shell-命令"><a href="#Scrapy-Shell-命令" class="headerlink" title="Scrapy Shell 命令:"></a>Scrapy Shell 命令:</h2><ul>
<li><p>开始抓取网页:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy shell <span class="string">'http://www.dytt8.net/index.htm'</span></div></pre></td></tr></table></figure>
</li>
<li><p>selector内容:</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.xpath(<span class="string">"//a/@href"</span>).extract()[<span class="number">0</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>输出jsonItem：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl dmoz -o items.json</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath:"></a>xpath:</h2><ul>
<li><p>following-sibling:<br>除自身外后面的同辈兄弟。如：td/following-sibling::td    同级td兄弟。</p>
</li>
<li><p>xpath中的序列从1开始：/a[1],代表a的第一个元素。没有[0]。</p>
</li>
<li><p>遍历多个变量：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> t , l <span class="keyword">in</span> izip(response.xpath(strname), response.xpath(strurl)):</div></pre></td></tr></table></figure>
</li>
<li><p>r<br>在Python的string前面加上‘r’， 是为了告诉编译器这个string是个raw string，不要转意backslash ‘\’ 。 例如，\n 在raw string中，是两个字符，\和n， 而不会转意为换行符。由于正则表达式和 \ 会有冲突，因此，当一个字符串使用了正则表达式后，最好在前面加上’r’。</p>
</li>
</ul>
<h2 id="激活pipeline"><a href="#激活pipeline" class="headerlink" title="激活pipeline:"></a>激活pipeline:</h2><p>在setting.py里，为了启用一个Item Pipeline组件，你必须将它的类添加到 ITEM_PIPELINES 配置，就像下面这个例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    &apos;myproject.pipelines.PricePipeline&apos;: 300,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;&apos;工程名.pipelines.自定义处理pipe类名&apos;: 1&#125;</div></pre></td></tr></table></figure>
<h2 id="使用相对XPaths"><a href="#使用相对XPaths" class="headerlink" title="使用相对XPaths:"></a>使用相对XPaths:</h2><p>/或者//永远表示的是绝对路径，在嵌套xpath里，用’a/text()’这样的相对路径。</p>
<h2 id="response-urljoin"><a href="#response-urljoin" class="headerlink" title="response.urljoin:"></a>response.urljoin:</h2><p>方法建立绝对路径并且产生新的请求，并注册回调函数parse_dir_contents()来爬取需要的数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">"ul.directory.dir-col &gt; li &gt; a::attr('href')"</span>):</div><div class="line">            url = response.urljoin(href.extract())</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse_dir_contents)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_dir_contents</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//ul/li'</span>):</div><div class="line">            item = DmozItem()</div><div class="line">            item[<span class="string">'title'</span>] = sel.xpath(<span class="string">'a/text()'</span>).extract()</div><div class="line">            item[<span class="string">'link'</span>] = sel.xpath(<span class="string">'a/@href'</span>).extract()</div><div class="line">            item[<span class="string">'desc'</span>] = sel.xpath(<span class="string">'text()'</span>).extract()</div><div class="line">            <span class="keyword">yield</span> item</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="递归抓取"><a href="#递归抓取" class="headerlink" title="递归抓取:"></a>递归抓取:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blurb2Spider</span><span class="params">(BaseSpider)</span>:</span></div><div class="line">   name = <span class="string">"blurb2"</span></div><div class="line">   allowed_domains = [<span class="string">"www.domain.com"</span>]</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="keyword">yield</span> self.make_requests_from_url(<span class="string">"http://www.domain.com/bookstore/new"</span>)</div><div class="line"></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">       hxs = HtmlXPathSelector(response)</div><div class="line">       urls = hxs.select(<span class="string">'//div[@class="bookListingBookTitle"]/a/@href'</span>).extract()</div><div class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> urls:</div><div class="line">           <span class="keyword">yield</span> Request(urlparse.urljoin(<span class="string">'https://www.domain.com/'</span>, i[<span class="number">1</span>:]),callback=self.parse_url)</div><div class="line"></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self, response)</span>:</span></div><div class="line">       hxs = HtmlXPathSelector(response)</div><div class="line">       <span class="keyword">print</span> response,<span class="string">'-------&gt;'</span></div></pre></td></tr></table></figure>
<h2 id="相对地址"><a href="#相对地址" class="headerlink" title="相对地址:"></a>相对地址:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urljoin</div><div class="line">urlparse.urljoin(response.url, myurl)</div></pre></td></tr></table></figure>
<h2 id="定制图片管道的例子"><a href="#定制图片管道的例子" class="headerlink" title="定制图片管道的例子:"></a>定制图片管道的例子:</h2><p>下面是一个图片管道的完整例子，其方法如上所示:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.pipeline.images <span class="keyword">import</span> ImagesPipeline</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImagesPipeline</span><span class="params">(ImagesPipeline)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span><span class="params">(self, item, info)</span>:</span></div><div class="line">        <span class="keyword">for</span> image_url <span class="keyword">in</span> item[<span class="string">'image_urls'</span>]:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(image_url)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span><span class="params">(self, results, item, info)</span>:</span></div><div class="line">        image_paths = [x[<span class="string">'path'</span>] <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_paths:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Item contains no images"</span>)</div><div class="line">        item[<span class="string">'image_paths'</span>] = image_paths</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<h2 id="定位要详细"><a href="#定位要详细" class="headerlink" title="定位要详细:"></a>定位要详细:</h2><p>//div[@id = “Zoom”]//img[1]/@src<br>div的定位要详细，如果是<br>//div/span/img[1]/@src<br>就返回为null,虽然firebug里面也没有问题。</p>
<h2 id="Strip"><a href="#Strip" class="headerlink" title="Strip():"></a>Strip():</h2><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。<br>MapCompose(unicode.strip, unicode.title))  ，移除空格与换行<br>例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">l.add_xpath(<span class="string">'image_time'</span>, <span class="string">'//div[@class = "co_content8"]/ul/text()[1]'</span>, MapCompose(unicode.strip, unicode.title))</div></pre></td></tr></table></figure>
<h2 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片:"></a>下载图片:</h2><p>settings.py中有一行ROBOTSTXT_OBEY = True，需要改成False，否则可能下载不了图片。<br>ROBOTSTXT_OBEY<br>是否遵守robot协议，有些网站的robot.txt中表明，不允许爬去，这时候，如果要爬去的话，就要设置为false，不遵守。</p>
<h2 id="No-Moulde-PIL-Find"><a href="#No-Moulde-PIL-Find" class="headerlink" title="No Moulde PIL Find:"></a>No Moulde PIL Find:</h2><p>直接用pycharm自带的interpreter安装pillow</p>
<h2 id="mac下要注意python的安装路径"><a href="#mac下要注意python的安装路径" class="headerlink" title="mac下要注意python的安装路径"></a>mac下要注意python的安装路径</h2><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><blockquote>
<p><a href="http://www.jianshu.com/p/078ad2067419" target="_blank" rel="external">http://www.jianshu.com/p/078ad2067419</a><br><a href="http://www.cnblogs.com/kylinlin/p/5405246.html" target="_blank" rel="external">http://www.cnblogs.com/kylinlin/p/5405246.html</a><br><a href="http://wiki.jikexueyuan.com/project/scrapy/item-pipeline.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/scrapy/item-pipeline.html</a><br><a href="http://www.open-open.com/lib/view/open1432868637316.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1432868637316.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scrapy-Shell-命令&quot;&gt;&lt;a href=&quot;#Scrapy-Shell-命令&quot; class=&quot;headerlink&quot; title=&quot;Scrapy Shell 命令:&quot;&gt;&lt;/a&gt;Scrapy Shell 命令:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开始抓取网页:&lt;/p&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;scrapy shell &lt;span class=&quot;string&quot;&gt;&#39;http://www.dytt8.net/index.htm&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;selector内容:&lt;/p&gt;
  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;response.xpath(&lt;span class=&quot;string&quot;&gt;&quot;//a/@href&quot;&lt;/span&gt;).extract()[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出jsonItem：&lt;/p&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;scrapy crawl dmoz -o items.json&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;xpath&quot;&gt;&lt;a href=&quot;#xpath&quot; class=&quot;headerlink&quot; title=&quot;xpath:&quot;&gt;&lt;/a&gt;xpath:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;following-sibling:&lt;br&gt;除自身外后面的同辈兄弟。如：td/following-sibling::td    同级td兄弟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xpath中的序列从1开始：/a[1],代表a的第一个元素。没有[0]。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历多个变量：&lt;/p&gt;
  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t , l &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; izip(response.xpath(strname), response.xpath(strurl)):&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;r&lt;br&gt;在Python的string前面加上‘r’， 是为了告诉编译器这个string是个raw string，不要转意backslash ‘\’ 。 例如，\n 在raw string中，是两个字符，\和n， 而不会转意为换行符。由于正则表达式和 \ 会有冲突，因此，当一个字符串使用了正则表达式后，最好在前面加上’r’。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;激活pipeline&quot;&gt;&lt;a href=&quot;#激活pipeline&quot; class=&quot;headerlink&quot; title=&quot;激活pipeline:&quot;&gt;&lt;/a&gt;激活pipeline:&lt;/h2&gt;&lt;p&gt;在setting.py里，为了启用一个Item Pipeline组件，你必须将它的类添加到 ITEM_PIPELINES 配置，就像下面这个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ITEM_PIPELINES = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;myproject.pipelines.PricePipeline&amp;apos;: 300,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ITEM_PIPELINES = &amp;#123;&amp;apos;工程名.pipelines.自定义处理pipe类名&amp;apos;: 1&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用相对XPaths&quot;&gt;&lt;a href=&quot;#使用相对XPaths&quot; class=&quot;headerlink&quot; title=&quot;使用相对XPaths:&quot;&gt;&lt;/a&gt;使用相对XPaths:&lt;/h2&gt;&lt;p&gt;/或者//永远表示的是绝对路径，在嵌套xpath里，用’a/text()’这样的相对路径。&lt;/p&gt;
&lt;h2 id=&quot;response-urljoin&quot;&gt;&lt;a href=&quot;#response-urljoin&quot; class=&quot;headerlink&quot; title=&quot;response.urljoin:&quot;&gt;&lt;/a&gt;response.urljoin:&lt;/h2&gt;&lt;p&gt;方法建立绝对路径并且产生新的请求，并注册回调函数parse_dir_contents()来爬取需要的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, response)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; href &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; response.css(&lt;span class=&quot;string&quot;&gt;&quot;ul.directory.dir-col &amp;gt; li &amp;gt; a::attr(&#39;href&#39;)&quot;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url = response.urljoin(href.extract())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; scrapy.Request(url, callback=self.parse_dir_contents)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parse_dir_contents&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, response)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sel &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; response.xpath(&lt;span class=&quot;string&quot;&gt;&#39;//ul/li&#39;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            item = DmozItem()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            item[&lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;] = sel.xpath(&lt;span class=&quot;string&quot;&gt;&#39;a/text()&#39;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            item[&lt;span class=&quot;string&quot;&gt;&#39;link&#39;&lt;/span&gt;] = sel.xpath(&lt;span class=&quot;string&quot;&gt;&#39;a/@href&#39;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            item[&lt;span class=&quot;string&quot;&gt;&#39;desc&#39;&lt;/span&gt;] = sel.xpath(&lt;span class=&quot;string&quot;&gt;&#39;text()&#39;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; item&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Scrapy" scheme="http://codeshuai.com/tags/Scrapy/"/>
    
      <category term="Learning" scheme="http://codeshuai.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy安装与运行记录</title>
    <link href="http://codeshuai.com/2017/02/27/2017-02-27/"/>
    <id>http://codeshuai.com/2017/02/27/2017-02-27/</id>
    <published>2017-02-27T04:02:44.000Z</published>
    <updated>2017-02-27T04:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><pre><code>brew install python
</code></pre><p>Homebrew会自动安装好Setuptools和 pip 。<br>Setuptools提供 easy_install 命令，实现通过网络（通常Internet）下载和安装第三方Python包。 还可以轻松地将这种网络安装的方式加入到自己开发的Python应用中。<br>pip 是一款方便安装和管理Python 包的工具。</p>
<h2 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h2><pre><code>pip install scrapy
</code></pre><h3 id="Scrapy-使用"><a href="#Scrapy-使用" class="headerlink" title="Scrapy 使用:"></a>Scrapy 使用:</h3><ul>
<li>IDE工具：pycharm社区免费版本<ul>
<li>教程参考: <a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html#intro-tutorial" target="_blank" rel="external">http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html#intro-tutorial</a> </li>
</ul>
</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令:"></a>命令:</h3><ul>
<li><p>生成HelloWorld的Scrapy工程  </p>
<pre><code>scrapy startproject HelloWorld  
</code></pre></li>
<li>在pycharm IDE中配置命令<br><img src="/images/A373E711-D1C1-42FB-83BB-772FD44EB369.png" alt="A373E711-D1C1-42FB-83BB-772FD44EB369"></li>
</ul>
<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>   执行:</p>
<pre><code>scrapy crawl MyPa (MyPa是自己在类中定义的爬虫名字)，
</code></pre><p>   相当于在终端执行：</p>
<pre><code>/usr/local/bin/python /usr/local/lib/python2.7/site-packages/scrapy/cmdline.py crawl MyPa
</code></pre><p> 注意：要小心python的路径，如果python的路径不对，还是会报错。这里指的路径是系统路径与pycharm里设置的python路径。<br>            在终端里用which python查看一下路径,如果与pycharm设置里的不同，将修改成更系统路径一样的。</p>
<h2 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题:"></a>中文问题:</h2><ul>
<li>shell里输出的是utf-8编码,用print可打印出中文。</li>
<li>用变量格式化的方式，不直接在xpath中用中文字符，而是用一个变量代替。如’中文’,用u’中文’。或者在字符串前加u。如u”//a/text()”</li>
<li><p>打印的时候可以参考：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> sel <span class="keyword">in</span>  response.xpath(<span class="string">"//div[@id='mcontent']/div/p"</span>):</div><div class="line">      conect = sel.xpath(<span class="string">"text()"</span>).extract()</div><div class="line">         <span class="keyword">for</span> t <span class="keyword">in</span> conect:</div><div class="line">           print(t.encode(<span class="string">"utf-8"</span>))</div></pre></td></tr></table></figure>
</li>
<li><p>pycharm中支持中文</p>
<ol>
<li><p>代码页加入:</p>
<p> <code># -*-coding:utf-8-*-</code></p>
</li>
<li><p>代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">strpath = <span class="string">u"//td[descendant::a[contains(text(),'中文字符')]]"</span>。</div><div class="line">或者</div><div class="line">strz = <span class="string">'中文字符'</span></div><div class="line">strpath = <span class="string">u"//td[descendant::a[contains(text(),%s)]]%strz"</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>json输出中文：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.file = codecs.open(<span class="string">"items.json"</span>, <span class="string">"wb"</span>, encoding=<span class="string">"utf-8"</span>)</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">    line = json.dumps(dict(item), ensure_ascii=<span class="keyword">False</span>) + <span class="string">"\n"</span></div><div class="line">    self.file.write(line)</div><div class="line">    <span class="keyword">return</span> item</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(self, spider)</span>:</span></div><div class="line">    self.file.close()</div></pre></td></tr></table></figure>
<a id="more"></a>
</li>
</ul>
<p>##读取文件<br>with codecs.open(file_name, “r”,encoding=’utf-8’, errors=’ignore’) as fdata:</p>
<p>##decode encode<br>decode 总是返回unicode字符<br>encode 总是接受一个unicode字符进行转换</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Homebrew&quot;&gt;&lt;a href=&quot;#安装Homebrew&quot; class=&quot;headerlink&quot; title=&quot;安装Homebrew&quot;&gt;&lt;/a&gt;安装Homebrew&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装python&quot;&gt;&lt;a href=&quot;#安装python&quot; class=&quot;headerlink&quot; title=&quot;安装python&quot;&gt;&lt;/a&gt;安装python&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;brew install python
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Homebrew会自动安装好Setuptools和 pip 。&lt;br&gt;Setuptools提供 easy_install 命令，实现通过网络（通常Internet）下载和安装第三方Python包。 还可以轻松地将这种网络安装的方式加入到自己开发的Python应用中。&lt;br&gt;pip 是一款方便安装和管理Python 包的工具。&lt;/p&gt;
&lt;h2 id=&quot;安装Scrapy&quot;&gt;&lt;a href=&quot;#安装Scrapy&quot; class=&quot;headerlink&quot; title=&quot;安装Scrapy&quot;&gt;&lt;/a&gt;安装Scrapy&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;pip install scrapy
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Scrapy-使用&quot;&gt;&lt;a href=&quot;#Scrapy-使用&quot; class=&quot;headerlink&quot; title=&quot;Scrapy 使用:&quot;&gt;&lt;/a&gt;Scrapy 使用:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IDE工具：pycharm社区免费版本&lt;ul&gt;
&lt;li&gt;教程参考: &lt;a href=&quot;http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html#intro-tutorial&quot;&gt;http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html#intro-tutorial&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令:&quot;&gt;&lt;/a&gt;命令:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;生成HelloWorld的Scrapy工程  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scrapy startproject HelloWorld  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;在pycharm IDE中配置命令&lt;br&gt;&lt;img src=&quot;/images/A373E711-D1C1-42FB-83BB-772FD44EB369.png&quot; alt=&quot;A373E711-D1C1-42FB-83BB-772FD44EB369&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;原理：&lt;/h3&gt;&lt;p&gt;   执行:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scrapy crawl MyPa (MyPa是自己在类中定义的爬虫名字)，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   相当于在终端执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/bin/python /usr/local/lib/python2.7/site-packages/scrapy/cmdline.py crawl MyPa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 注意：要小心python的路径，如果python的路径不对，还是会报错。这里指的路径是系统路径与pycharm里设置的python路径。&lt;br&gt;            在终端里用which python查看一下路径,如果与pycharm设置里的不同，将修改成更系统路径一样的。&lt;/p&gt;
&lt;h2 id=&quot;中文问题&quot;&gt;&lt;a href=&quot;#中文问题&quot; class=&quot;headerlink&quot; title=&quot;中文问题:&quot;&gt;&lt;/a&gt;中文问题:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;shell里输出的是utf-8编码,用print可打印出中文。&lt;/li&gt;
&lt;li&gt;用变量格式化的方式，不直接在xpath中用中文字符，而是用一个变量代替。如’中文’,用u’中文’。或者在字符串前加u。如u”//a/text()”&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打印的时候可以参考：&lt;/p&gt;
 &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sel &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;  response.xpath(&lt;span class=&quot;string&quot;&gt;&quot;//div[@id=&#39;mcontent&#39;]/div/p&quot;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      conect = sel.xpath(&lt;span class=&quot;string&quot;&gt;&quot;text()&quot;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; conect:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           print(t.encode(&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pycharm中支持中文&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码页加入:&lt;/p&gt;
&lt;p&gt; &lt;code&gt;# -*-coding:utf-8-*-&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;strpath = &lt;span class=&quot;string&quot;&gt;u&quot;//td[descendant::a[contains(text(),&#39;中文字符&#39;)]]&quot;&lt;/span&gt;。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;或者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strz = &lt;span class=&quot;string&quot;&gt;&#39;中文字符&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strpath = &lt;span class=&quot;string&quot;&gt;u&quot;//td[descendant::a[contains(text(),%s)]]%strz&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;json输出中文：&lt;/p&gt;
  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.file = codecs.open(&lt;span class=&quot;string&quot;&gt;&quot;items.json&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;wb&quot;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, item, spider)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    line = json.dumps(dict(item), ensure_ascii=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.file.write(line)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spider_closed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, spider)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.file.close()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Scrapy" scheme="http://codeshuai.com/tags/Scrapy/"/>
    
      <category term="Setup" scheme="http://codeshuai.com/tags/Setup/"/>
    
  </entry>
  
  <entry>
    <title>hex+mac安装记录</title>
    <link href="http://codeshuai.com/2017/02/22/2017-02-22/"/>
    <id>http://codeshuai.com/2017/02/22/2017-02-22/</id>
    <published>2017-02-22T12:06:47.000Z</published>
    <updated>2017-02-23T18:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有用的命令："><a href="#有用的命令：" class="headerlink" title="有用的命令："></a>有用的命令：</h2><ul>
<li>hexo g -d  直接发布部署</li>
<li>hexo g  生成   </li>
<li>hexo s   打开本地服务器   <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 浏览</li>
</ul>
<h3 id="本地预览步骤："><a href="#本地预览步骤：" class="headerlink" title="本地预览步骤："></a>本地预览步骤：</h3><ol>
<li>hexo g</li>
<li>hexo s</li>
<li><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></li>
</ol>
<h2 id="安装参考："><a href="#安装参考：" class="headerlink" title="安装参考："></a>安装参考：</h2><p><a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">参考域名绑定部分、修改主题</a><br><a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">各种出现的问题总结</a> </p>
<h2 id="具体安装时出现的问题："><a href="#具体安装时出现的问题：" class="headerlink" title="具体安装时出现的问题："></a>具体安装时出现的问题：</h2><ul>
<li>不能执行hexo命令，只有init,help,version三个命令。解决方案：要在hexo目录下执行。</li>
<li>注意坑：执行hexo server时出错，_config.xml里，type: repo: branch:后面，要有一个空格。</li>
<li>在DNS的配置里，加入固定的两个IP<blockquote>
<p>@        A        192.30.252.153<br>@        A        192.30.252.154</p>
<a id="more"></a>
</blockquote>
</li>
</ul>
<h2 id="hexo主题："><a href="#hexo主题：" class="headerlink" title="hexo主题："></a>hexo主题：</h2><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next风格不错</a><br><a href="https://github.com/iissnan/hexo-theme-next/wiki" target="_blank" rel="external">Next的设置GitWiki里很详细</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有用的命令：&quot;&gt;&lt;a href=&quot;#有用的命令：&quot; class=&quot;headerlink&quot; title=&quot;有用的命令：&quot;&gt;&lt;/a&gt;有用的命令：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;hexo g -d  直接发布部署&lt;/li&gt;
&lt;li&gt;hexo g  生成   &lt;/li&gt;
&lt;li&gt;hexo s   打开本地服务器   &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt; 浏览&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;本地预览步骤：&quot;&gt;&lt;a href=&quot;#本地预览步骤：&quot; class=&quot;headerlink&quot; title=&quot;本地预览步骤：&quot;&gt;&lt;/a&gt;本地预览步骤：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;hexo g&lt;/li&gt;
&lt;li&gt;hexo s&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;安装参考：&quot;&gt;&lt;a href=&quot;#安装参考：&quot; class=&quot;headerlink&quot; title=&quot;安装参考：&quot;&gt;&lt;/a&gt;安装参考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/ryaneLee/blog/638440&quot;&gt;参考域名绑定部分、修改主题&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://my.oschina.net/ryaneLee/blog/638440&quot;&gt;各种出现的问题总结&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;具体安装时出现的问题：&quot;&gt;&lt;a href=&quot;#具体安装时出现的问题：&quot; class=&quot;headerlink&quot; title=&quot;具体安装时出现的问题：&quot;&gt;&lt;/a&gt;具体安装时出现的问题：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不能执行hexo命令，只有init,help,version三个命令。解决方案：要在hexo目录下执行。&lt;/li&gt;
&lt;li&gt;注意坑：执行hexo server时出错，_config.xml里，type: repo: branch:后面，要有一个空格。&lt;/li&gt;
&lt;li&gt;在DNS的配置里，加入固定的两个IP&lt;blockquote&gt;
&lt;p&gt;@        A        192.30.252.153&lt;br&gt;@        A        192.30.252.154&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://codeshuai.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://codeshuai.com/2017/02/22/hello-world/"/>
    <id>http://codeshuai.com/2017/02/22/hello-world/</id>
    <published>2017-02-22T04:41:28.000Z</published>
    <updated>2017-02-22T04:42:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
